[package]
name = "backend"
version = "0.1.0"
edition = "2021"
description = "This is the backend part of the implicit function plotter. It receives an implicit function expression in plain text, parses it, and computes its contour. It is then passed to the frontend in form of vertices and edges. The backend is written in Rust and compiled to Web Assembly for maximum performance."
repository = "https://github.com/njezersek/graphing-calculator"
license = "GPL-3.0"

[lib]
crate-type = ["cdylib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.86"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

inari_wasm = "0.1.2"
lazy_static = "1.4.0"
pest = "2.1.3"
pest_derive = "2.1.0"
nalgebra = "0.32.2"
js-sys = "0.3.59"
parking_lot = "0.12.1"
strum = "0.24.1"
strum_macros = "0.24.3"


[package.metadata.wasm-pack.profile.release]
wasm-opt = false



[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = 1
